#!/usr/bin/env groovy


// Switch to using https://github.com/BCDevOps/jenkins-pipeline-shared-lib when stable.
@NonCPS
import groovy.json.JsonOutput
/*
 * Sends a rocket chat notification
 */
def notifyRocketChat(text, url) {
    def rocketChatURL = url
    def payload = JsonOutput.toJson([
      "username":"Jenkins",
      "icon_url":"https://wiki.jenkins.io/download/attachments/2916393/headshot.png",
      "text": text
    ])

    sh("curl -X POST -H 'Content-Type: application/json' --data \'${payload}\' ${rocketChatURL}")
}

/*
 * Updates the global pastBuilds array: it will iterate recursively
 * and add all the builds prior to the current one that had a result
 * different than 'SUCCESS'.
 */
def buildsSinceLastSuccess(previousBuild, build) {
  if ((build != null) && (build.result != 'SUCCESS')) {
    pastBuilds.add(build)
    buildsSinceLastSuccess(pastBuilds, build.getPreviousBuild())
  }
}

/*
 * Generates a string containing all the commit messages from
 * the builds in pastBuilds.
 */
@NonCPS
def getChangeLog(pastBuilds) {
  def log = ""
  for (int x = 0; x < pastBuilds.size(); x++) {
    for (int i = 0; i < pastBuilds[x].changeSets.size(); i++) {
      def entries = pastBuilds[x].changeSets[i].items
      for (int j = 0; j < entries.length; j++) {
        def entry = entries[j]
        log += "* ${entry.msg} by ${entry.author} \n"
      }
    }
  }
  return log;
}

def CHANGELOG = "No new changes"
def IMAGE_HASH = "latest"

node('master') {
  /*
   * Extract secrets and create relevant environment variables.
   * The contents of the secret are extracted in as many files as the keys contained in the secret.
   * The files are named as the key, and contain the corresponding value.
   */
  sh("oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm")
  ROCKET_DEPLOY_WEBHOOK = sh(script: "cat rocket-deploy-webhook", returnStdout: true)
  withEnv(["ROCKET_DEPLOY_WEBHOOK=${ROCKET_DEPLOY_WEBHOOK}"]){
    stage('Build'){
      // isolate last successful builds and then get the changelog
      pastBuilds = []
      buildsSinceLastSuccess(pastBuilds, currentBuild);
      CHANGELOG = getChangeLog(pastBuilds);

      echo ">>>>>>Changelog: \n ${CHANGELOG}"

      try {
        echo "Building: mem-mmti-public-angular-dev"
        openshiftBuild bldCfg: 'mem-mmti-public-angular-dev', showBuildLogs: 'true'
        echo "Build done"

        echo "Building: mem-mmti-public-dev"
        openshiftBuild bldCfg: 'mem-mmti-public-dev', showBuildLogs: 'true'
        echo "Build done"

        echo "Tagging image..."
        // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
        // Tag the images for deployment based on the image's hash
        IMAGE_HASH = sh (
        script: """oc get istag mem-mmti-public-dev:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
        returnStdout: true).trim()
        echo ">> IMAGE_HASH: ${IMAGE_HASH}"
        echo "Tagging done"
      } catch (error) {
        notifyRocketChat(
          "The latest deployment of mem-mmti-public-dev to Dev seems to have failed\n'${error.message}'",
          ROCKET_DEPLOY_WEBHOOK
        )
        throw error
      }
    }
  }
}

podTemplate(label: 'sonarqube-maven', name: 'sonarqube-maven', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: 'registry.access.redhat.com/openshift3/jenkins-agent-nodejs-8-rhel7',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '1Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/tmp',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
  )
])
{
  stage('Code Quality Check') {
    node('sonarqube-maven'){
      //the checkout is mandatory, otherwise code quality check would fail
      echo "checking out source"
      echo "Build: ${BUILD_ID}"
      checkout scm
      SONARQUBE_URL = sh (
          script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
          returnStdout: true
        ).trim()
      echo "SONARQUBE_URL: ${SONARQUBE_URL}"
      dir('sonar-runner') {
        try {
          sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        } finally { }
      }
    }
  }
}


node('master'){
  /*
  * Extract secrets and create relevant environment variables.
  * The contents of the secret are extracted in as many files as the keys contained in the secret.
  * The files are named as the key, and contain the corresponding value.
  */
  sh("oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm")
  ROCKET_DEPLOY_WEBHOOK = sh(script: "cat rocket-deploy-webhook", returnStdout: true)

  withEnv(["ROCKET_DEPLOY_WEBHOOK=${ROCKET_DEPLOY_WEBHOOK}"]){
    stage('Deploy to Dev'){
      try {
        echo "Deploying to dev..."
        openshiftTag destStream: 'mem-mmti-public-dev', verbose: 'false', destTag: 'dev', srcStream: 'mem-mmti-public-dev', srcTag: "${IMAGE_HASH}"
        sleep 5
        openshiftVerifyDeployment depCfg: 'mem-mmti-public', namespace: 'mem-mmt-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false', waitTime: 600000
        echo ">>>> Deployment Complete"

        notifyRocketChat(
          "A new version of mem-mmti-public-dev is now in Dev. \n Changes: \n ${CHANGELOG}",
          ROCKET_DEPLOY_WEBHOOK
        )
      } catch (error) {
        notifyRocketChat(
          "The latest deployment of mem-mmti-public-dev to Dev seems to have failed\n'${error.message}'",
          ROCKET_DEPLOY_WEBHOOK
        )
      }
    }
  }
}

def browserStackPodLabel = "mem-bdd-${UUID.randomUUID().toString()}"
podTemplate(label: browserStackPodLabel, name: browserStackPodLabel, serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7:v3.9',
    resourceRequestCpu: '1000m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '2Gi',
    resourceLimitMemory: '2Gi',
    workingDir: '/tmp',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}',
  )
]) {
    node(browserStackPodLabel) {
      sh("oc extract secret/bdd-browserstack --to=${env.WORKSPACE} --confirm")
      BROWSERSTACK_USERNAME = sh(script: "cat BROWSERSTACK_USERNAME", returnStdout: true)
      BROWSERSTACK_TOKEN = sh(script: "cat BROWSERSTACK_TOKEN", returnStdout: true)
      DEBUG_MODE = false
      withEnv(["BROWSERSTACK_USERNAME=${BROWSERSTACK_USERNAME}", "BROWSERSTACK_TOKEN=${BROWSERSTACK_TOKEN}", "DEBUG_MODE=${DEBUG_MODE}"]) {
        stage ('Functional tests') {
        checkout scm
        dir('functional-tests') {
          try {
            echo "Starting Functional Tests"
            sh './gradlew remoteChrome'
          } catch (error) {
            throw error
          } finally {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/geb/**/*'
            junit 'build/test-results/**/*.xml'
            publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'build/reports/spock',
                        reportFiles: 'index.html',
                        reportName: "BDD Spock Report"
                    ])
            publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'build/reports/tests/remoteChromeTest',
                        reportFiles: 'index.html',
                        reportName: "Full Test Report"
                    ])
            perfReport compareBuildPrevious: true, excludeResponseTime: true, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, modeEvaluation: true, modePerformancePerTestCase: true, percentiles: '0,50,90,100', relativeFailedThresholdNegative: 80.0, relativeFailedThresholdPositive: 20.0, relativeUnstableThresholdNegative: 50.0, relativeUnstableThresholdPositive: 50.0, sourceDataFiles: 'build/test-results/**/*.xml'
          }
        }
      }
    }
  }
}
