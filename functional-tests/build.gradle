import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "groovy"
    id "com.github.erdi.webdriver-binaries" version "2.2"
}

ext {
  // The drivers we want to use
  drivers = ["chrome", "chromeHeadless","remoteIE", "remoteEdge", "remoteFirefox", "remoteChrome", "remoteSafari"]

  ext {
    groovyVersion = '2.5.8'
    gebVersion = '3.4'
    seleniumVersion = '3.141.59'
    chromeDriverVersion = '83.0.4103.39'
    geckoDriverVersion = '0.21.0'
    ieDriverVersion = '3.14'
    edgeDriverVersion = '3.14.0'
    spockCoreVersion = '1.3-groovy-2.5'
    spockReportsVersion = '1.7.1'
    slf4jApiVersion = '1.7.25'
  }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.gebish:geb-gradle:$gebVersion"
    // If using Spock, need to depend on geb-spock
    testImplementation "org.gebish:geb-spock:$gebVersion"
    testImplementation("org.spockframework:spock-core:$spockCoreVersion") {
        exclude group: "org.codehaus.groovy"
    }
    testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    testImplementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'


    // If using JUnit, need to depend on geb-junit (3 or 4)
    testImplementation "org.gebish:geb-junit4:$gebVersion"

    //Support
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-java:$seleniumVersion"


    // Drivers
    // testImplementation "org.seleniumhq.selenium:selenium-edge-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-safari-driver:$seleniumVersion"

    // Spock reports
    testImplementation( "com.athaydes:spock-reports:$spockReportsVersion" ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    // if you don't already have slf4j-api and an implementation of it in the classpath, add this!
    testImplementation "org.slf4j:slf4j-api:$slf4jApiVersion"
    testImplementation "org.slf4j:slf4j-simple:$slf4jApiVersion"
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
    // iedriver ieDriverVersion

}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver

        def envFile = file('.env')
        if (envFile.exists()) {
          envFile.readLines().each() {
            def (key, value) = it.tokenize('=')
            if (key && value) {
              environment key, value
            }
          }
        }
    }
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
      exceptionFormat = 'full'
    }
    systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
    systemProperty 'com.athaydes.spockframework.report.internal.HtmlReportCreator.inlineCss', false
    systemProperty 'com.athaydes.spockframework.report.projectName',"MEM-MMTI-PUBLIC"
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

sourceSets {
  test {
    groovy {
      srcDirs = ["src/test/groovy"]
    }
    resources {
      srcDirs = ["src/test/resources"]
    }
  }
}
