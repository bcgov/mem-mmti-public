// Switch to using https://github.com/BCDevOps/jenkins-pipeline-shared-lib when stable.
@NonCPS
import groovy.json.JsonOutput
/*
 * Sends a slack notification
 */
def notifySlack(text, url, channel, attachments) {
  def slackURL = url
  def jenkinsIcon = 'https://wiki.jenkins-ci.org/download/attachments/2916393/logo.png'
  def payload = JsonOutput.toJson([text: text,
      channel: channel,
      username: "Jenkins",
      icon_url: jenkinsIcon,
      attachments: attachments
  ])
  def encodedReq = URLEncoder.encode(payload, "UTF-8")
  sh("curl -s -S -X POST --data \'payload=${encodedReq}\' ${slackURL}")
}

/*
 * Updates the global pastBuilds array: it will iterate recursively
 * and add all the builds prior to the current one that had a result
 * different than 'SUCCESS'.
 */
def buildsSinceLastSuccess(previousBuild, build) {
  if ((build != null) && (build.result != 'SUCCESS')) {
    pastBuilds.add(build)
    buildsSinceLastSuccess(pastBuilds, build.getPreviousBuild())
  }
}

/*
 * Generates a string containing all the commit messages from
 * the builds in pastBuilds.
 */
@NonCPS
def getChangeLog(pastBuilds) {
  def log = ""
  for (int x = 0; x < pastBuilds.size(); x++) {
    for (int i = 0; i < pastBuilds[x].changeSets.size(); i++) {
      def entries = pastBuilds[x].changeSets[i].items
      for (int j = 0; j < entries.length; j++) {
        def entry = entries[j]
        log += "* ${entry.msg} by ${entry.author} \n"
      }
    }
  }
  return log;
}

def CHANGELOG = "No new changes"

// podTemplate(label: 'bddstack', name: 'bddstack', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
//   containerTemplate(
//     name: 'jnlp',
//     image: '172.50.0.2:5000/openshift/jenkins-slave-bddstack',
//     resourceRequestCpu: '500m',
//     resourceLimitCpu: '1000m',
//     resourceRequestMemory: '1Gi',
//     resourceLimitMemory: '4Gi',
//     workingDir: '/home/jenkins',
//     command: '',
//     args: '${computer.jnlpmac} ${computer.name}'
//   )
// ])
// {
//   stage('Unit Test on Dev') {
//     node('bddstack') {
//       echo "checking out source"
//       echo "Build: ${BUILD_ID}"
//       checkout scm
//       try {
//         sh 'yarn install'
//         sh 'npm test'
//       } finally {
//         archiveArtifacts allowEmptyArchive: true, artifacts: 'build/coverage/src/**/*'
//         publishHTML (target: [
//                     allowMissing: false,
//                     alwaysLinkToLastBuild: false,
//                     keepAll: true,
//                     reportDir: 'build/coverage/src',
//                     reportFiles: 'index.html',
//                     reportName: "Unit Test Coverage Report"
//                   ])
//       }
//     }
//   }
// }

node('master') {
  /*
   * Extract secrets and create relevant environment variables.
   * The contents of the secret are extracted in as many files as the keys contained in the secret.
   * The files are named as the key, and contain the corresponding value.
   */
  sh("oc extract secret/slack-secrets --to=${env.WORKSPACE} --confirm")
  SLACK_HOOK = sh(script: "cat webhook", returnStdout: true)
  DEV_CHANNEL = sh(script: "cat dev-channel", returnStdout: true)

  withEnv(["SLACK_HOOK=${SLACK_HOOK}", "DEV_CHANNEL=${DEV_CHANNEL}"]){
    stage('Build'){
      // isolate last successful builds and then get the changelog
      pastBuilds = []
      buildsSinceLastSuccess(pastBuilds, currentBuild);
      CHANGELOG = getChangeLog(pastBuilds);

      echo ">>>>>>Changelog: \n ${CHANGELOG}"

      try {
        echo "Building: mem-mmti-public-angular-dev"
        openshiftBuild bldCfg: 'mem-mmti-public-angular-dev', showBuildLogs: 'true'
        echo "Build done"

        echo "Building: mem-mmti-public-dev"
        openshiftBuild bldCfg: 'mem-mmti-public-dev', showBuildLogs: 'true'
        echo "Build done"

        echo "Tagging image..."
        // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
        // Tag the images for deployment based on the image's hash
        IMAGE_HASH = sh (
        script: """oc get istag mem-mmti-public-dev:latest -o template --template=\"{{.image.dockerImageReference}}\"|awk -F \":\" \'{print \$3}\'""",
        returnStdout: true).trim()
        echo ">> IMAGE_HASH: ${IMAGE_HASH}"

        openshiftTag destStream: 'mem-mmti-public-dev', verbose: 'true', destTag: "${IMAGE_HASH}", srcStream: 'mem-mmti-public-dev', srcTag: 'latest'
        echo "Tagging done"
      } catch (error) {
        notifySlack(
            "The latest mem-mmti-public-dev build seems to have broken\n'${error.message}'",
            env.SLACK_HOOK,
            env.DEV_CHANNEL,
            []
        )
        throw error
      }
    }
  }
}

podTemplate(label: 'sonarqube-maven', name: 'sonarqube-maven', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: 'registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '1Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/tmp',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
  )
])
{
  stage('Code Quality Check') {
    node('sonarqube-maven'){
      //the checkout is mandatory, otherwise code quality check would fail
      echo "checking out source"
      echo "Build: ${BUILD_ID}"
      checkout scm
      SONARQUBE_URL = sh (
          script: 'oc get routes -o wide --no-headers | awk \'/sonarqube/{ print match($0,/edge/) ?  "https://"$2 : "http://"$2 }\'',
          returnStdout: true
        ).trim()
      echo "SONARQUBE_URL: ${SONARQUBE_URL}"
      dir('sonar-runner') {
        try {
          sh returnStdout: true, script: "./gradlew sonarqube -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.verbose=true --stacktrace --info"
        } finally { }
      }
    }
  }
}


node('master'){
  /*
  * Extract secrets and create relevant environment variables.
  * The contents of the secret are extracted in as many files as the keys contained in the secret.
  * The files are named as the key, and contain the corresponding value.
  */
  sh("oc extract secret/slack-secrets --to=${env.WORKSPACE} --confirm")
  SLACK_HOOK = sh(script: "cat webhook", returnStdout: true)
  DEPLOY_CHANNEL = sh(script: "cat deploy-channel", returnStdout: true)

  withEnv(["SLACK_HOOK=${SLACK_HOOK}", "DEPLOY_CHANNEL=${DEPLOY_CHANNEL}"]){
    stage('Deploy to Dev'){
      try {
        echo "Deploying to dev..."
        openshiftTag destStream: 'mem-mmti-public-dev', verbose: 'true', destTag: 'dev', srcStream: 'mem-mmti-public-dev', srcTag: 'latest'
        sleep 5
        openshiftVerifyDeployment depCfg: 'mem-mmti-public', namespace: 'mem-mmt-dev', replicaCount: 1, verbose: 'false', verifyReplicaCount: 'false', waitTime: 600000
        echo ">>>> Deployment Complete"

        notifySlack(
          "A new version of mem-mmti-public-dev is now in Dev. \n Changes: \n ${CHANGELOG}",
          env.SLACK_HOOK,
          env.DEPLOY_CHANNEL,
          []
        )
      } catch (error) {
        notifySlack(
          "The latest deployment of mem-mmti-public-dev to Dev seems to have failed\n'${error.message}'",
          env.SLACK_HOOK,
          env.DEPLOY_CHANNEL,
          []
        )
      }
    }
  }
}

podTemplate(label: 'bddstack', name: 'bddstack', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: '172.50.0.2:5000/openshift/jenkins-slave-bddstack',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '1Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/home/jenkins',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
  )
])
{
  stage('FT on Dev') {
    node('bddstack') {
      //the checkout is mandatory, otherwise functional test would fail
      echo "checking out source"
      echo "Build: ${BUILD_ID}"
      checkout scm
      dir('functional-tests') {
        try {
          sh 'node e2e.ts'
        } finally {
          archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/geb/**/*'
          junit 'build/test-results/**/*.xml'
          publishHTML (target: [
                      allowMissing: false,
                      alwaysLinkToLastBuild: false,
                      keepAll: true,
                      reportDir: 'build/reports/spock',
                      reportFiles: 'index.html',
                      reportName: "BDD Spock Report"
                  ])
          publishHTML (target: [
                      allowMissing: false,
                      alwaysLinkToLastBuild: false,
                      keepAll: true,
                      reportDir: 'build/reports/tests/chromeHeadlessTest',
                      reportFiles: 'index.html',
                      reportName: "Full Test Report"
                  ])
          perfReport compareBuildPrevious: true, excludeResponseTime: true, ignoreFailedBuilds: true, ignoreUnstableBuilds: true, modeEvaluation: true, modePerformancePerTestCase: true, percentiles: '0,50,90,100', relativeFailedThresholdNegative: 80.0, relativeFailedThresholdPositive: 20.0, relativeUnstableThresholdNegative: 50.0, relativeUnstableThresholdPositive: 50.0, sourceDataFiles: 'build/test-results/**/*.xml'
        }
      }
    }
  }
}

podTemplate(label: 'owasp-zap', name: 'owasp-zap', serviceAccount: 'jenkins', cloud: 'openshift', containers: [
  containerTemplate(
    name: 'jnlp',
    image: '172.50.0.2:5000/openshift/jenkins-slave-zap',
    resourceRequestCpu: '500m',
    resourceLimitCpu: '1000m',
    resourceRequestMemory: '3Gi',
    resourceLimitMemory: '4Gi',
    workingDir: '/home/jenkins',
    command: '',
    args: '${computer.jnlpmac} ${computer.name}'
  )
])
{
  stage('ZAP Security Scan') {
    node('owasp-zap') {
      //the checkout is mandatory
      echo "checking out source"
      echo "Build: ${BUILD_ID}"
      checkout scm
      dir('zap') {
        def retVal = sh returnStatus: true, script: './runzap.sh'
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: '/zap/wrk', reportFiles: 'index.html', reportName: 'ZAP Full Scan', reportTitles: 'ZAP Full Scan'])
        echo "Return value is: ${retVal}"
      }
    }
  }
}
